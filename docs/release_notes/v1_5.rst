Release Notes for Version 1.5
=============================

Custom Frequency Ranges
***********************

It is possible to bake a custom amount of frequency ranges in the *Sound Bake* node.
Previously there were 10 hardcoded ranges.

.. image:: images_v1_5/custom_frequency_ranges.png


Conditional Debug Nodes
***********************

The *Debug* and *Debug Drawer* node have a *Conditional* input now (which is hidden
by default). This allows more precise and easier debugging in loops and other
cases where a node is executed multiple times with different inputs.

.. image:: images_v1_5/conditional_debug_nodes.gif


Basic Shape Key Implementation
******************************

The two new socket types *Shape Key* and *Shape Key List* are part of AN now.
Also the *Object Instancer* node handles objects with shape keys much better in v1.5.

.. image:: images_v1_5/shape_key_nodes.png


Basic Font Implementation
*************************

Two new socket types for fonts (*Font* and *Font List*) as well as the ability
to set the font of a text object using the *Text Object Output* node.

.. image:: images_v1_5/fonts.png



Get Selected Objects Node
*************************

This node can easily be used together with the new conditional debug nodes.
It's important to know that this node will only work while during creation of
the node tree. When you start the render it is disabled, because your render
should not depend on the selection.


Extended Math Nodes
*******************

New *Snap* operation that can be used in the *Float, Vector, Euler and Quaternion Math* node.
This enables you to snap values to specific increments.

.. image:: images_v1_5/math_operations.png

New *Vector Angle* node that can calculate the angle between two vectors as well
as the rotation difference.


Quaternion Math Node
********************

Previously you were not really able to work with quaternions in a more complex way.

.. image:: images_v1_5/quaternion_math_node.png


Parse Number Node
*****************

This node can convert a text into a number which is handy when you want to parse
a text block or something similiar that contains numbers.

.. image:: images_v1_5/parse_number_node.png


Extended Rotation Matrix Node
*****************************

The *Rotation Matrix* node allows to create a rotation matrix for all 3 axis
at once now (previously you had to create three individual matrices and combine
them or misuse the *Compose Matrix* node which is slower).

.. image:: images_v1_5/rotation_matrix_node.png


Shear Matrix Node
*****************

The *Shear Matrix* node calculates a matrix that can be used to shear meshes.
You can't use this matrix on objects because it cannot be decomposed into
location, rotation and scale. Instead it can be used with the
*Transform Vector List* node.

.. image:: images_v1_5/shear_matrix.png


Rotation to Direction Node
**************************

This is the reverse of the *Direction to Rotation*.

.. image:: images_v1_5/rotation_to_direction_node.png


BVH Tree
********

Next to the KD-Tree which can be used to find close points, you have access
to Blenders BVH-Tree module now. A BVH Tree is a data structure that allows quick
ray cast operations on many polygons.

.. image:: images_v1_5/rotation_to_direction_node.png


Sequence Info Node
******************

Access many different properties of a given sequence (the image doesn't show all).

.. image:: images_v1_5/sequence_info_node.png


Access Hair Data
****************

The *Particle Info* node gives you access to some more particle properties like
hair points now (the image only shows a subset of the possible outputs).

.. image:: images_v1_5/particle_info_node.png


Get Random List Elements Node
*****************************

The same node can be archieved with a combination of some existing nodes, but
having a specialised node for that makes everything easier.

.. image:: images_v1_5/get_random_list_elements.png


Dynamic Node Labels
*******************

Dynamic node labels allows you to have cleaner node trees because some nodes can
show useful information in their label, which allows you to collapse them without
disadvantages.

.. image:: images_v1_5/dynamic_node_labels.png


Shift List Node
***************

.. image:: images_v1_5/shift_list_node.png


Data Interface Node
*******************

This node allows other addons to exchange data with AN. More information is
available here: http://animation-nodes-manual.readthedocs.org/en/latest/dev_guide/data_interface.html


ID Key System
*************

The *ID Key* system got a major overhaul again. It is much more stable now, which
means it doesn't accidently remove some sockets.
In general the *ID Key System* allows you to store data for individual objects
in custom properties. The best known usecase for that is to store initial
transformations of multiple objects so that you can still access them when the
objects were moved by AN.


Smaller Changes
***************

The *Get List Element* node has a *Clamp* checkbox now, that allows you to
clamp the index to the length of the list.

The *Create List* node displays the amount of elements in the output list.

The *Object Mesh Data* node outputs the name of the mesh now (the socket is hidden by default).

The *Random Text* node has a *Node Seed* property now.
